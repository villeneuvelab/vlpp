#!/usr/bin/env nextflow
/*
vim: syntax=groovy
-*- mode: groovy;-*-

    Villeneuve Laboratory PET Pipeline (VLPP)

    For any bugs or problems found, please contact us at:
      - christophe.bedetti@criugm.qc.ca
      - https://github.com/villeneuvelab/vlpp/issues
*/


/*
 * Parameters validation
 */

// Help
if ( params.containsKey('help') ) {
    println """\
    Execute the vlpp project
    Usage: vlpp --pet <> --freesurfer <> --participant <> [-params-file <>]
        Options:
        --pet
            Pet file, it could be .mnc, .nii or .nii.gz
        --freesurfer
            Freesurfer directory of the participant
        --participant
            Participant code name
        --help
            Print vlpp usage
        Nextflow options:
        -params-file
            Load script parameters from a JSON/YAML file
        -resume
            Execute the script using the cached results, useful to continue
            executions that was stopped by an error
        -h, -help
            Print the nextflow usage
    """
    .stripIndent()
    System.exit(0)
}

// Checking mandatory parameters
['pet', 'freesurfer', 'participant'].each {
    if( !params.containsKey(it) ) {
        println "The parameter `${it}` is not set"
        println "`vlpp --help` for vlpp usage"
        println "`vlpp -help` for nextflow usage"
        System.exit(0)
    }
}

// Setting missing params to null
['dataset', 'realign', 'smooth', 'maskSmooth'].each {
    if( !params.containsKey(it) ) {
        params[it] = null
    }
}

petInput = file params.pet
freesurferDir = file params.freesurfer
anatInput = freesurferDir / "mri" / "T1.mgz"
atlasInput = freesurferDir / "mri" / "aparc+aseg.mgz"
participant = params.participant
suffix = params.suffix
baseSf1 = file "/sf1"
tpl = baseSf1 / "project" / "yai-974-aa" / "local" / "atlas" / "MNI152_T1_1mm.nii"

println """\
        =============
        V L P P - N F
        -------------
        PET file             : ${petInput}
        freesurfer directory : ${freesurferDir}
        participant          : ${participant}
        ============="""
        .stripIndent()


/*
 *  Preparation
 */

process anatconvert {

    publishDir "anat", mode: 'copy', overwrite: true

    input:
    file img from anatInput

    output:
    file "*" + suffix.anat into anat

    """
    mri_convert --out_type nii --input_volume ${img} \
        --output_volume ${participant}${suffix.anat}
    """
}

process atlasconvert {

    publishDir "anat", mode: 'copy', overwrite: true

    input:
    file img from atlasInput

    output:
    file "*" + suffix.atlas into atlas

    """
    mri_convert --out_type nii --input_volume ${img} \
        --output_volume ${participant}${suffix.atlas}
    """
}

process petconvert {

    input:
    file img from petInput

    output:
    file 'petconvert.nii.gz' into petnii

    script:
    template "petconvert.py"
}


/*
 *  Realign
 */

process realign {

    publishDir "tmp", mode: 'copy', overwrite: true

    input:
    file pet from petnii

    output:
    file "*tmp-toEstimate" + suffix.pet into petToEstimate
    file "*tmp-toRegister" + suffix.pet into petToRegister
    file "*tmp-toRegister" + suffix.centiloid into centiloidToRegister
    file "transform/*"

    script:
    template "realign.py"
}


/*
 * Segmentation
 */

process segmentation {

    publishDir workflow.launchDir, mode: 'copy', overwrite: true

    input:
    file anat

    output:
    file "mask/*roi-c1" + suffix.mask into gmSpm
    file "mask/*roi-c2" + suffix.mask into wmSpm
    file "mask/*roi-c3" + suffix.mask into csfSpm
    file "mask/*roi-c4" + suffix.mask into boneSpm
    file "mask/*roi-c5" + suffix.mask into softSpm
    file "transform/*" + suffix.anat2tpl into anat2tpl
    file "transform/*" + suffix.tpl2anat into tpl2anat

    script:
    template "segmentation.sh"
}

process brainmask {

    publishDir "mask", mode: 'copy', overwrite: true

    input:
    file gm from gmSpm
    file wm from wmSpm
    file csf from csfSpm

    output:
    file "*roi-brain" + suffix.mask into brainMask
    file "*roi-gmwm" + suffix.mask into gmwmMask

    """
    brain=${participant}_roi-brain${suffix.mask}
    fslmaths $gm -add $wm -add $csf -fillh -bin \$brain

    gmwm=${participant}_roi-gmwm${suffix.mask}
    fslmaths $gm -thr 0.25 tmp_gm.nii.gz
    fslmaths $wm -thr 0.25 tmp_wm.nii.gz
    fslmaths tmp_gm.nii.gz -add tmp_wm.nii.gz -bin \$gmwm
    """
}


/*
 * Registrations
 */

process estimate_pet2anat {

    publishDir "transform", mode: 'copy', overwrite: true

    /*
     *  ANTSImageRegistrationOptimizer error
     *  https://sourceforge.net/p/advants/discussion/840260/thread/7cf6ba92/
     *  Just ignore the error
     */
    errorStrategy "ignore"

    input:
    file anat
    file pet from petToEstimate

    output:
    file "*" + suffix.pet2anat into pet2anat

    script:
    template "estimate_pet2anat.sh"
}

process apply_transforms_pet {

    publishDir workflow.launchDir, mode: 'copy', overwrite: true

    input:
    file anat
    file tpl
    file gmwm from gmwmMask
    file pet from petToRegister
    file centiloid from centiloidToRegister
    file pet2anat
    file anat2tpl

    output:
    file "pet/*" + suffix.petInAnat into petInAnat
    file "pet/*" + suffix.petInTpl
    file "centiloid/*" + suffix.centiloidInAnat into centiloidInAnat
    file "centiloid/*" + suffix.centiloidInTpl

    script:
    template "apply_transforms_pet.py"
}


process apply_transforms_anat {

    publishDir "anat", mode: 'copy', overwrite: true

    input:
    file anat
    file tpl
    file atlas
    file anat2tpl

    output:
    file "*" + suffix.anatInTpl
    //file "*" + suffix.atlasInTpl

    script:
    template "apply_transforms_anat.py"
}


/*
 *  Pickatlas
 */

rois = Channel.from(
    [ "cerebellumCortex", [8, 47] ],
    [ "cerebellumCortexErode", [8, 47] ],
    [ "wholeCerebellum", [7, 8, 46, 47] ],
    [ "whitematter", [2, 41] ],
    )

process pickatlas {

    publishDir "mask", mode: 'copy', overwrite: true

    input:
    file atlas
    set roiName, index from rois

    output:
    file "*" + suffix.mask into refMaskToSuvr

    script:
    template "pickatlas.py"
}

/*
process mask2tpl {

    publishDir "mask", mode: 'copy', overwrite: true

    input:
    file tpl
    file anat2tpl_aff
    file anat2tpl
    file refmask from refmask_tpl

    output:
    file "*" + suffix["maskInTpl"] into refmaskInTpl

    """
    base=${refmask}
    base=\${base/${suffix["mask"]}}
    antsApplyTransforms --dimensionality 3 --reference-image ${tpl} \
        --input ${refmask} --output \${base}${suffix["maskInTpl"]} \
        --interpolation NearestNeighbor --input-image-type 0 \
        -t ${anat2tpl} -t ${anat2tpl_aff}
    """
}
*/


/*
 * Suvr
 */

suvrInAnatMode = "anat"
process suvrInAnat {

    publishDir workflow.launchDir, mode: 'copy', overwrite: true

    input:
    val mode from suvrInAnatMode
    file pet from petInAnat
    file centiloid from centiloidInAnat
    file mask from refMaskToSuvr

    output:
    file "pet/*" + suffix.petInAnat into petSuvrToTpl, petSuvrToStats
    file "centiloid/*" + suffix.centiloidInAnat into centiloidSuvrToTpl, centiloidSuvrToStats

    script:
    template "suvrcalc.py"
}

process apply_transforms_pet_suvr {

    publishDir "pet", mode: 'copy', overwrite: true

    input:
    file suvr from petSuvrToTpl
    file tpl
    file anat2tpl

    output:
    file "*" + suffix.petInTpl

    script:
    template "apply_transforms_suvr.py"
}

process apply_transforms_centiloid_suvr {

    publishDir "centiloid", mode: 'copy', overwrite: true

    input:
    file suvr from centiloidSuvrToTpl
    file tpl
    file anat2tpl

    output:
    file "*" + suffix.centiloidInTpl

    script:
    template "apply_transforms_suvr.py"
}


/*
 * Segstats
 */

process stats_pet_anat {

    publishDir "stats", mode: 'copy', overwrite: true

    input:
    file suvr from petSuvrToStats
    file atlas

    output:
    file "*.csv"

    script:
    template "stats_suvr_anat.py"
}

process stats_centiloid_anat {

    publishDir "stats", mode: 'copy', overwrite: true

    input:
    file suvr from centiloidSuvrToStats
    file atlas

    output:
    file "*.csv"

    script:
    template "stats_suvr_anat.py"
}

