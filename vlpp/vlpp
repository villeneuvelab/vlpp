#!/usr/bin/env nextflow
/*
vim: syntax=groovy
-*- mode: groovy;-*-

    Villeneuve Laboratory PET Pipeline (VLPP)

    For any bugs or problems found, please contact us at:
      - https://github.com/villeneuvelab/vlpp/issues
*/


/*
 * Parameters validation
 */

// Help
if ( params.containsKey('help') ) {
    println """\
    Execute the vlpp project
    Usage: vlpp --pet <> --freesurfer <> --participant <> [-params-file <>]
        Options:
        --pet
            Pet file, it could be .mnc, .nii or .nii.gz
        --freesurfer
            Freesurfer directory of the participant
        --participant
            Participant code name
        --help
            Print vlpp usage
        Nextflow options:
        -params-file
            Load script parameters from a JSON/YAML file
        -resume
            Execute the script using the cached results, useful to continue
            executions that was stopped by an error
        -h, -help
            Print the nextflow usage
    """
    .stripIndent()
    System.exit(0)
}

// Checking mandatory parameters
['pet', 'freesurfer', 'participant'].each {
    if( !params.containsKey(it) ) {
        println "The parameter `${it}` is not set"
        println "`vlpp --help` for vlpp usage"
        println "`vlpp -help` for nextflow usage"
        System.exit(0)
    }
}

// Checking and setting params

//dataset
if( params.containsKey('dataset') ) { dataset = params.dataset }
else { dataset = null }

//tracer
if( params.containsKey('tracer') ) { tracer = params.tracer }
else {
    if( params.dataset == "DIAN" ) { tracer = "PIB" }
    else if( params.dataset == "PAD" ) { tracer = params.participant[-3..-1] }
    else { tracer = "unknown" }
}

//realign
realignDefault = ['ignore':false]
if( params.containsKey('realign') ) {
    realign = [:]
    realignDefault.each {
        realign[it.key] = params.realign.get(it.key, it.value)
    }
}
else{ realign = realignDefault }

//smooth
smoothDefault = [
    'ignore':false,
    'fwhm':6,
    'mask':'default',
    ]
if( params.containsKey('smooth') ) {
    smooth = [:]
    smoothDefault.each {
        smooth[it.key] = params.smooth.get(it.key, it.value)
    }
}
else{ smooth = smoothDefault }

//freesurfer references
fsRefDefault = [
    "cerebellumCortex": [8, 47],
    "cerebellumCortexErode": [8, 47],
    "wholeCerebellum": [7, 8, 46, 47],
    "whitematter": [2, 41],
    ]
fsRefMap = fsRefDefault
if( params.containsKey('fsReferences') ) {
    params.fsReferences.each { fsRefMap[it.key] = it.value }
}


// Channels and pipeline values
baseSf1 = file "/sf1"
tpl = baseSf1 / "project" / "yai-974-aa" / "local" / "atlas" / "MNI152_T1_1mm.nii"

participant = params.participant
suffix = params.suffix

petInput = file params.pet

freesurferDir = file params.freesurfer
anatInput = freesurferDir / "mri" / "T1.mgz"
atlasInput = freesurferDir / "mri" / "aparc+aseg.mgz"

fsRefList = []
fsRefMap.each() { k, v -> fsRefList << [k,v] }
fsRefs = Channel.from(fsRefList)

println """\
        =============
        V L P P - N F
        -------------
        PET file             : ${petInput}
        freesurfer directory : ${freesurferDir}
        participant          : ${participant}
        dataset              : ${dataset}
        tracer               : ${tracer}
        ============="""
        .stripIndent()


/*
 *  Preparation
 */

process anatconvert {

    publishDir "anat", mode: 'copy', overwrite: true

    input:
    file img from anatInput

    output:
    file "*" + suffix.anat into anat

    """
    mri_convert --out_type nii --input_volume ${img} \
        --output_volume ${participant}${suffix.anat}
    """
}

process atlasconvert {

    publishDir "anat", mode: 'copy', overwrite: true

    input:
    file img from atlasInput

    output:
    file "*" + suffix.atlas into atlas

    """
    mri_convert --out_type nii --input_volume ${img} \
        --output_volume ${participant}${suffix.atlas}
    """
}

process petconvert {

    input:
    file img from petInput

    output:
    file "*" + suffix.pet into petnii

    script:
    template "petconvert.py"
}


/*
 *  Realign
 */

process realign {

    publishDir "tmp", mode: 'copy', overwrite: true

    input:
    file pet from petnii

    output:
    file "*tmp-estimate*" into petToEstimate
    file "*time-4070*" + suffix.pet into petToRegister
    file "*time-5070*" + suffix.pet into pet5070ToRegister
    file "transform/*"

    script:
    template "realign.py"
}


/*
 * Segmentation
 */

process segmentation {

    publishDir workflow.launchDir, mode: 'copy', overwrite: true

    input:
    file anat

    output:
    file "mask/*roi-c1" + suffix.mask into gmSpm
    file "mask/*roi-c2" + suffix.mask into wmSpm
    file "mask/*roi-c3" + suffix.mask into csfSpm
    file "mask/*roi-c4" + suffix.mask into boneSpm
    file "mask/*roi-c5" + suffix.mask into softSpm
    file "transform/*" + suffix.anat2tpl into anat2tpl
    file "transform/*" + suffix.tpl2anat into tpl2anat

    script:
    template "segmentation.sh"
}

process brainmask {

    publishDir "mask", mode: 'copy', overwrite: true

    input:
    file gm from gmSpm
    file wm from wmSpm
    file csf from csfSpm

    output:
    file "*roi-brain" + suffix.mask into brainMask
    file "*roi-gmwm" + suffix.mask into gmwmMask

    """
    brain=${participant}_roi-brain${suffix.mask}
    fslmaths $gm -add $wm -add $csf -fillh -bin \$brain

    gmwm=${participant}_roi-gmwm${suffix.mask}
    fslmaths $gm -thr 0.25 tmp_gm.nii.gz
    fslmaths $wm -thr 0.25 tmp_wm.nii.gz
    fslmaths tmp_gm.nii.gz -add tmp_wm.nii.gz -bin \$gmwm
    """
}


/*
 * Registrations
 */

process estimate_pet2anat {

    publishDir "transform", mode: 'copy', overwrite: true

    /*
     *  ANTSImageRegistrationOptimizer error
     *  https://sourceforge.net/p/advants/discussion/840260/thread/7cf6ba92/
     *  Just ignore the error
     */
    errorStrategy "ignore"

    input:
    file anat
    //file brainMask
    file pet from petToEstimate

    output:
    file "*" + suffix.pet2anat into pet2anat

    script:
    template "estimate_pet2anat.sh"
}

process apply_transforms_pet {

    publishDir workflow.launchDir, mode: 'copy', overwrite: true

    input:
    file anat
    file tpl
    file gmwm from gmwmMask
    file brainMask
    file pet from petToRegister
    file centiloid from pet5070ToRegister
    file pet2anat
    file anat2tpl

    output:
    file "pet/*space-anat*" into petInAnat
    file "pet/*space-tpl*"
    file "centiloid/*space-anat*" into pet5070InAnat
    file "centiloid/*space-tpl*" into pet5070InTpl

    script:
    template "apply_transforms_pet.py"
}

process apply_transforms_anat {

    publishDir "anat", mode: 'copy', overwrite: true

    input:
    file anat
    file tpl
    file atlas
    file anat2tpl

    output:
    file "*space-tpl*"
    //file "*" + suffix.atlasInTpl

    script:
    template "apply_transforms_anat.py"
}


/*
 *  Pickatlas
 */

process pickatlas {

    publishDir "mask", mode: 'copy', overwrite: true

    input:
    file atlas
    set refName, index from fsRefs

    output:
    file "*" + suffix.mask into refMaskToSuvr

    script:
    template "pickatlas.py"
}

/*
process mask2tpl {

    publishDir "mask", mode: 'copy', overwrite: true

    input:
    file tpl
    file anat2tpl_aff
    file anat2tpl
    file refmask from refmask_tpl

    output:
    file "*" + suffix["maskInTpl"] into refmaskInTpl

    """
    base=${refmask}
    base=\${base/${suffix["mask"]}}
    antsApplyTransforms --dimensionality 3 --reference-image ${tpl} \
        --input ${refmask} --output \${base}${suffix["maskInTpl"]} \
        --interpolation NearestNeighbor --input-image-type 0 \
        -t ${anat2tpl} -t ${anat2tpl_aff}
    """
}
*/


/*
 * Suvr & Centiloid
 */

process suvr_calc_in_anat {

    publishDir workflow.launchDir, mode: 'copy', overwrite: true

    input:
    file pet from petInAnat
    file centiloid from pet5070InAnat
    file mask from refMaskToSuvr
    file tpl
    file anat2tpl

    output:
    file "pet/*space-anat*" + suffix.suvr into petSuvrToCent, petSuvrToStats
    file "centiloid/*space-anat*" + suffix.suvr into pet5070SuvrToCent, pet5070SuvrToStats
    //file "*/*space-tpl*"

    script:
    template "suvrcalc.py"
}

process centiloid_calc_in_anat {

    publishDir workflow.launchDir, mode: 'copy', overwrite: true

    input:
    file pet from petSuvrToCent
    file centiloid from pet5070SuvrToCent
    file tpl
    file anat2tpl

    output:
    file "pet/*space-anat*" + suffix.centiloid into petCentToStats
    file "centiloid/*space-anat*" + suffix.centiloid into pet5070CentToStats
    file "*/*space-tpl*"

    when:
    tracer.matches("PIB|NAV")

    script:
    template "centiloidcalc.py"
}

process centiloid_calc_in_tpl {

    publishDir workflow.launchDir, mode: 'copy', overwrite: true

    input:
    file pet from pet5070InTpl

    output:
    file "centiloid/*"

    script:
    template "centiloidcalc_tpl.py"

}


/*
 * Segstats
 */

process stats_pet_anat {

    publishDir "stats", mode: 'copy', overwrite: true

    input:
    file img from petSuvrToStats
    file atlas

    output:
    file "*.csv"

    script:
    template "stats_anat.py"
}

/*
process stats_centiloid_anat {

    publishDir "stats", mode: 'copy', overwrite: true

    input:
    file img from pet5070CentToStats
    file atlas

    output:
    file "*.csv"

    script:
    template "stats_anat.py"
}
*/
