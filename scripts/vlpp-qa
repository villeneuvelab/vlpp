#!/usr/bin/env python
# -*- coding: utf-8 -*-


import argparse
import os
import sys
import time

from vlpp.utils import TPL_PATH
from jinja2 import Environment, FileSystemLoader
from subprocess import call


def get_arguments():

    parser = argparse.ArgumentParser(
            formatter_class=argparse.RawDescriptionHelpFormatter,
            description="""
            Documentation at https://github.com/villeneuvelab/vlpp
            Please report any issues there
            """,
            #epilog="""""",
            )

    parser.add_argument(
            '-r', '--rapid',
            required=False, default="yai-974-aa",
            help='Your RAPid number on guillimin',
            )

    parser.add_argument(
            '-w', '--walltime',
            required=False,
            help='Set walltime',
            )

    parser.add_argument(
            '--dev',
            required=False, action="store_true",
            )

    return parser.parse_args()


class Qa(object):

    def __init__(self, args):
        self.wd = os.getcwd()

        #Usefull directories
        self.codeDir = os.path.join(self.wd, "code")
        self.logDir = os.path.join(self.wd, "log")
        if not os.path.exists(self.codeDir): os.makedirs(self.codeDir)
        if not os.path.exists(self.logDir): os.makedirs(self.logDir)

        self.tags = {
                "RAPid": args.rapid,
                "logDir": self.logDir,
                "walltime": self._walltime(args.walltime),
                "dev": args.dev,
                "participant": "qa",
                "qa": True,
                }


    def _walltime(self, walltime):
        if walltime:
            return walltime
        else:
            n = len(os.listdir(os.path.curdir))
            hour = n // 60 + 1
            return "{}:00:00".format(str(hour))


    def run(self):

        qsubScript = os.path.join(self.codeDir, "vlpp_qa.sh")
        self.tpl.stream(**self.tags).dump(qsubScript)
        call("qsub {}".format(qsubScript), shell=True)


    @property
    def tpl(self):
        return Environment(
                loader=FileSystemLoader(TPL_PATH),
                trim_blocks=True,
                ).get_template("guillimin_qsub.sh")


def main():
    args = get_arguments()
    Qa(args).run()
    return 0

if __name__ == '__main__':
    sys.exit(main())
