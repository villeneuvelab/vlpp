#!/usr/bin/env python
# -*- coding: utf-8 -*-


import argparse
import glob
import os
import pandas
import sys
import time

from vlpp.utils import TPL_PATH
from builtins import input
from jinja2 import Environment, FileSystemLoader
from subprocess import call


def get_arguments():

    parser = argparse.ArgumentParser(
            formatter_class=argparse.RawDescriptionHelpFormatter,
            description="""
            Documentation at https://github.com/villeneuvelab/vlpp
            Please report any issues there
            """,
            #epilog="""""",
            )

    parser.add_argument(
            '-p', '--pet_dir',
            required=False,
            help='Base directory for all of your PET data',
            )

    parser.add_argument(
            '-f', '--fs_dir',
            required=False,
            help='Base directory for all of your freesurfer data',
            )

    parser.add_argument(
            '-t', '--tsv',
            required=True,
            help='A tsv file describing your participants',
            )

    parser.add_argument(
            '-r', '--rapid',
            required=False, default="yai-974-aa",
            help='Your RAPid number on guillimin',
            )

    parser.add_argument(
            '-w', '--walltime',
            required=False, default="1:00:00",
            help='Set walltime, default="1:00:00"',
            )

    parser.add_argument(
            '--pet_pattern',
            required=False, default="*[nii.gz|gz|mnc]",
            help='Set pattern to match pet file, default="*[nii.gz|gz|mnc]"',
            )

    parser.add_argument(
            '-m', '--mode',
            required=False,
            help='How to search for pet data: dian, pad, bids',
            )

    parser.add_argument(
            '--submit',
            required=False, action="store_true",
            help='Submit the qsub scripts',
            )

    parser.add_argument(
            '--removing_working_dir',
            required=False, action="store_true",
            )

    parser.add_argument(
            '--debug',
            required=False, action="store_true",
            )

    parser.add_argument(
            '--dev',
            required=False, action="store_true",
            )

    return parser.parse_args()


class Qsub(object):

    def __init__(self, args):
        self.wd = os.getcwd()

        #Usefull directories
        self.codeDir = os.path.join(self.wd, "code")
        self.logDir = os.path.join(self.wd, "log")
        if not os.path.exists(self.codeDir): os.makedirs(self.codeDir)
        if not os.path.exists(self.logDir): os.makedirs(self.logDir)

        self.tsv = args.tsv
        self.mode = args.mode
        self.args = args

        #Load tsv into a DataFrame
        if self.tsv.endswith("tsv"):
            delimiter = '\t'

        else:
            delimiter = ','

        self.df = pandas.read_csv(
                self.tsv, delimiter=delimiter, comment="#", dtype=object)

        self.tags = {
                "RAPid": args.rapid,
                "logDir": self.logDir,
                "walltime": args.walltime,
                "dev": args.dev,
                "removingWorkingDir": args.removing_working_dir,
                }


    def petFile(self, line):
        if self.mode == "pad":
            petDir = os.path.join(
                    "/sf1", "project", "yai-974-aa", "dataset", "PreventAD",
                    "pet", "sourcedata", line.pet_dir)
            pattern = "*_4D_*1.mnc"

        elif self.mode == "dian":
            #ses = line.session_id
            baseDir = line.PIB_pwd
            petDir = baseDir.replace(
                    "/home/gonjil/project_yai",
                    "/sf1/project/yai-974-aa")
            imgName = line["img-name"]
            pattern = imgName #.replace(".gz", "")

        elif self.mode == "bids":
            petDir = os.path.join(
                    os.path.abspath(self.args.pet_dir),
                    self.participant(line), "pet")
            pattern = self.args.pet_pattern

        else:
            if self.args.pet_dir:
                petDir = os.path.join(
                        os.path.abspath(self.args.pet_dir), line.pet_dir)
            else:
                print("No base PET directory found, please use `-p` option`")
                print("See --help for more informations")
                sys.exit()
            pattern = self.args.pet_pattern

        try:
            return glob.glob(os.path.join(petDir, pattern))[0]
        except:
            print("Could not find any PET file")
            print("PET directory: {}".format(petDir))
            print("PET pattern: {}".format(pattern))
            sys.exit()


    def fsDir(self, line):
        if self.mode == "pad":
            return os.path.join(
                    "/sf1", "project", "yai-974-aa", "dataset", "PreventAD",
                    "pet", "derivatives", "freesurfer", line.fs_dir)

        elif self.mode == "dian":
            return os.path.join(
                    "/sf1", "project", "yai-974-aa", "dataset", "DIAN",
                    "derivatives", "freesurfer-v5.3.0",
                    "sub-" + line.participant_id + "_ses-" + line.session_id)

        elif self.mode == "bids":
            return os.path.join(
                    os.path.abspath(self.args.fs_dir),
                    self.participant(line) + "_T1w")

        else:
            if self.args.fs_dir:
                return os.path.join(
                        os.path.abspath(self.args.fs_dir), line.fs_dir)
            else:
                print("No base freesurfer directory found, use `-f` option`")
                print("See --help for more informations")
                sys.exit()


    def participant(self, line):
        try:
            sub = line.participant_id
            if not sub.startswith("sub-"):
                sub = "sub-" + sub
        except:
            print("'participant_id' column not found in {}".format(self.tsv))
            sys.exit()

        try:
            ses = line.session_id
            if not ses.startswith("ses-"):
                ses = "ses-" + ses
            sub += "_" + ses
        except:
            ses = ""

        return sub


    def run(self):

        args = []
        askAgain = True
        clobber = False
        for index, line in self.df.iterrows():
            participant_id = self.participant(line)
            tags = {
                    "participant": participant_id,
                    "pet": self.petFile(line),
                    "freesurfer": self.fsDir(line),
                    }
            tags = dict(self.tags, **tags)

            qsubName = "vlpp_{}.sh".format(participant_id)
            qsubScript = os.path.join(self.codeDir, qsubName)

            if os.path.exists(qsubScript):
                if askAgain:
                    print("{} already exists".format(qsubScript))
                    print("Shall we overwrite it ?")
                    print("y: yes")
                    print("Y: yes for all")
                    print("n: no")
                    print("N: no for all")
                    proceed = False
                    answer = None
                    while not proceed:
                        answer = input("(y/Y/n/N) ")
                        if answer in ["y", "Y", "n", "N"]:
                            proceed = True
                            if answer == "y":
                                clobber = True
                            elif answer == "n":
                                clobber = False
                            elif answer == "Y":
                                clobber = True
                                askAgain = False
                            elif answer == "N":
                                clobber = False
                                askAgain = False
            else:
                self.tpl.stream(**tags).dump(qsubScript)

            if clobber:
                self.tpl.stream(**tags).dump(qsubScript)

            if self.args.submit:
                call("qsub {}".format(qsubScript), shell=True)
                time.sleep(0.2)


    @property
    def tpl(self):
        return Environment(
                loader=FileSystemLoader(TPL_PATH),
                trim_blocks=True,
                ).get_template("guillimin_qsub.sh")


def main():
    args = get_arguments()
    Qsub(args).run()
    return 0


if __name__ == '__main__':
    sys.exit(main())
