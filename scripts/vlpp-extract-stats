#!/usr/bin/env python
# -*- coding: utf-8 -*-


import argparse
import pandas
import glob
import os
import sys
from builtins import input


def get_arguments():

    parser = argparse.ArgumentParser(
            formatter_class=argparse.RawDescriptionHelpFormatter,
            description="""
            """,
            epilog="""

            Documentation at https://github.com/villeneuvelab/vlpp
            Please report any issues there

            """)

    """
    parser.add_argument(
            '-r', '--ref',
            required=False, default="cerebellumCortex",
            help='Reference ROI name, default: cerebellumCortex'
            )

    parser.add_argument(
            '-d', '--data',
            required=False, default="suvr",
            help='Data type: [*suvr*, centiloid]'
            )

    parser.add_argument(
            '-o', '--output',
            required=False,
            help='output tsv file'
            )
    """

    return parser.parse_args()


class FetchStats(object):

    def __init__(self, outputDir):
        self.outputDir = outputDir

    def stats_space_tpl(self):
        datas = []

        pattern = '*/stats/*space-tpl.tsv'
        dataFiles = glob.glob(pattern)

        if dataFiles == []:
            #print("No file found with the pattern: {}".format(pattern))
            return

        rsldf = pandas.read_csv(dataFiles[0], sep="\t")
        for dataFile in dataFiles[1:]:
            rsldf = rsldf.append(pandas.read_csv(dataFile, sep="\t"))

        rsldf.sort_values(by=["participant_id"], inplace=True)
        rsldf.set_index("participant_id", inplace=True)

        post = dataFiles[0].split("_time")[-1]
        output = os.path.join(
                self.outputDir, "group_time{}".format(post))

        self._save(rsldf, output)
        return


    def stats_space_anat(self, ref, t):
        subjects = []
        datas = []

        pattern = '*/stats/*time-{0}*ref-{1}*.tsv'.format(t, ref)
        dataFiles = glob.glob(pattern)

        if dataFiles == []:
            #print("No file found with the pattern: {}".format(pattern))
            return

        for dataFile in dataFiles:
            subjects.append(dataFile.split("/")[-3])
            datas.append(pandas.read_csv(dataFile, sep="\t"))

        df = pandas.concat(datas, keys=subjects)
        meandf = df.get(['StructName', 'mean'])

        rsldf = pandas.DataFrame()
        for struct in meandf['StructName'].xs(subjects[0]):
            tempdf = meandf[meandf['StructName'] == struct]
            tempdf = tempdf.rename(columns={'mean':struct}).reset_index(level=1)
            rsldf[struct] = tempdf[struct]

        rsldf = rsldf.sort_index()
        rsldf.index.name = "participant_id"

        post = dataFiles[0].split("_time")[-1]
        output = os.path.join(
                self.outputDir, "group_time{}".format(post))

        self._save(rsldf, output)
        return

    def _save(self, rsldf, output):
        if os.path.exists(output):
            print("{} already exists".format(output))
            msg = 'Shall we overwrite it ?'
            proceed = input("%s (y/N) " % msg).lower() == 'y'
            if proceed:
                rsldf.to_csv(output, sep="\t", na_rep="n/a")
        else:
            rsldf.to_csv(output, sep="\t", na_rep="n/a")


def main():
    args = get_arguments()

    outputDir = os.path.join(os.getcwd(), 'stats')
    if not os.path.exists(outputDir):
        os.mkdir(outputDir)

    fetcher = FetchStats(outputDir)

    ANAT_REFS = [
            "cerebellumCortex",
            "wholeCerebellum",
            "infcereg",
            ]

    for ref in ANAT_REFS:
        for t in ["4070", "5070"]:
            fetcher.stats_space_anat(ref, t)

    fetcher.stats_space_tpl()


if __name__ == '__main__':
    sys.exit(main())

