#!/usr/bin/env python
# -*- coding: utf-8 -*-


import argparse
import pandas
import glob
import os
import sys
from builtins import input


def get_arguments():

    parser = argparse.ArgumentParser(
            formatter_class=argparse.RawDescriptionHelpFormatter,
            description="""
            """,
            epilog="""

            Documentation at https://github.com/villeneuvelab/vlpp
            Please report any issues there

            """)

    parser.add_argument(
            '-r', '--ref',
            required=False, default="cerebellumCortex",
            help='Reference ROI name, default: cerebellumCortex'
            )

    parser.add_argument(
            '-d', '--data',
            required=False, default="suvr",
            help='Data type: [*suvr*, centiloid]'
            )

    parser.add_argument(
            '-o', '--output',
            required=False,
            help='output tsv file'
            )

    return parser.parse_args()


def main():
    args = get_arguments()
    ref = args.ref
    dataType = args.data
    dataDir = os.getcwd()

    if args.output:
        output = args.output
    else:
        output = os.path.join(
                dataDir, 'stats', 'ref-{0}_means_{1}.tsv'.format(ref, dataType))
        if not os.path.exists(os.path.join(dataDir, 'stats')):
            os.mkdir(os.path.join(dataDir, 'stats'))

    subjects = []
    datas = []

    pattern = '{0}/*/stats/*_ref-{1}_*{2}.csv'.format(dataDir, ref, dataType)
    dataFiles = glob.glob(pattern)

    if dataFiles == []:
        print("Found no file with the pattern:")
        print(pattern)
        sys.exit()

    for dataFile in dataFiles:
        subjects.append(dataFile.split("/")[-3])
        datas.append(pandas.read_csv(dataFile))

    df = pandas.concat(datas, keys=subjects)
    meandf = df.get(['StructName', 'mean'])

    rsldf = pandas.DataFrame()
    for struct in meandf['StructName'].xs(subjects[0]):
        tempdf = meandf[meandf['StructName'] == struct]
        tempdf = tempdf.rename(columns={'mean':struct}).reset_index(level=1)
        rsldf[struct] = tempdf[struct]

    rsldf = rsldf.sort_index()

    if os.path.exists(output):
        print("{} already exists".format(output))
        msg = 'Shall we overwrite it ?'
        proceed = input("%s (y/N) " % msg).lower() == 'y'
        if proceed:
            rsldf.to_csv(output, sep="\t")
    else:
        rsldf.to_csv(output, sep="\t")

if __name__ == '__main__':
    sys.exit(main())

